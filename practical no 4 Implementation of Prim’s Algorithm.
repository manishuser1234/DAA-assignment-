import heapq

# Function to perform Prim's algorithm and find the MST
def prims_algorithm(graph, V):
    # Create a priority queue to store (weight, vertex) and a visited set
    pq = [(0, 0)]  # Start with the first vertex (index 0) with 0 weight
    visited = set()
    total_weight = 0  # To store the total weight of the MST

    # Loop until all vertices are visited
    while len(visited) < V:
        # Get the vertex with the smallest edge weight
        weight, u = heapq.heappop(pq)

        # If the vertex is already visited, skip it
        if u in visited:
            continue

        # Add vertex u to the MST
        visited.add(u)
        total_weight += weight

        # Explore all the neighbors of u and add the valid edges to the priority queue
        for v, w in graph[u]:
            if v not in visited:
                heapq.heappush(pq, (w, v))

    return total_weight

# Example usage
if __name__ == "__main__":
    # Number of vertices
    V = 5

    # Adjacency list representation of the graph
    # graph[u] contains (v, weight) which means there is an edge between u and v with given weight
    graph = {
        0: [(1, 2), (3, 6)],
        1: [(0, 2), (2, 3), (3, 8), (4, 5)],
        2: [(1, 3), (4, 7)],
        3: [(0, 6), (1, 8)],
        4: [(1, 5), (2, 7)]
    }

    mst_weight = prims_algorithm(graph, V)
    print(f"Total weight of the minimum spanning tree (MST): {mst_weight}")
