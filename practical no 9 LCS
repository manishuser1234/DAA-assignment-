def longestCommonSubsequence(text1, text2):
    m, n = len(text1), len(text2)
    
    # Create a 2D DP table with (m+1) x (n+1) size, initialized to 0
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Fill the DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if text1[i - 1] == text2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1  # If characters match, increment the LCS length
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Otherwise, take the max from adjacent cells

    # The value in dp[m][n] is the length of the LCS
    return dp[m][n]

# Example usage:
text1 = "abcde"
text2 = "ace"

result = longestCommonSubsequence(text1, text2)
print(f"Length of Longest Common Subsequence: {result}")
